
Internationalisation Support
============================


QGIS Plugin
-----------

The QGIS Plugin uses QtLinguist. this free, open source application can 
be downloaded and used to translate the Qt translation files.


Preparing for a release
.......................

As developer, before a release you should do:

* run :samp:`make update-translation-strings` to update the translation files
* distribute the .ts files under :samp:`gui/i18n` to the translators
* instruct them to open the .ts file for their locale with QtLinguist
* commit the returned file from the translator when all strings have been
  translated
* run :samp:`make compile-translation-strings` to create binary loadable 
  translations
* ensure the .qm files are distributed with the release (the .ts files do not 
  need to be released)


.. note:: Translators should take heed - when refreshing the .ts file in
   QtLinguist, the file *must be closed* (:menuselection:`File --> Close`) and
   then reopened. Simply loading doing (:menuselection:`File --< Open`) and
   choosing the same file you already have in the workspace will not refresh the
   workspace with any new changes that appeared on disk.

.. note:: :samp:`make update-translation-strings` is no destructive. That is,
   you can safely run it as many times as you like, new strings will be added
   to it, deprecated strings will be left in place and already translated
   strings will remain translated.

Rules of the road for developers
................................

These notes relate *only* to the modules under gui.

* Classes and anonymous functions that do not inherit QObject should use 
  the format :samp:`QCoreApplication.translate('Riab', 'Translations loaded')`
* Classes that inherit QObject should use the form :samp:`self.tr('foo')`


Adding a new language
.....................

To add a new language, edit the :samp:`gui/riab.pro` file and append the new 
locale to the bottom of the file. For example, to add South African english 
as a new locale, change this::

   TRANSLATIONS = i18n/riab_id.ts

to this::

    TRANSLATIONS = i18n/riab_id.ts\
                   i18n/riab_en_ZA.ts

Save and close the .pro file. Next run :samp:`make update-translation-strings` 
to generate the new .ts file under gui/i18n. Don't forget to :samp:`git add` 
the new file and place it under version control. 

RIAB Library Translations
-------------------------

Low level gettext usage
.......................

Translation is done using gettext.

Create the initial .po file::

   xgettext -d id -o i18n/id/LC_MESSAGES/riab.po i18ntest.py

After you create the initial .pot, you need to specify the characterset and 
encoding for that file (by editing it with a text editor). For example::

   "Content-Type: text/plain; charset=UTF-8\n"
   "Content-Transfer-Encoding: 8bit\n"


If you add strings to the file, update the .pot file by adding -j option::

   xgettext -j -d id -o i18n/id/LC_MESSAGES/riab.po i18ntest.py

Next, you can make the .po files available to translators. Recent versions of
QtLinguist support translations of .po files, so you can use a similar process
to that described in the gui section above.

When the .po file has been updated, it should be committed to the git
repository (e.g. via a pull request from the user's repository clone, or by
emailing the .po file to a developer). After receiving an updated .po file, 
it should be compiled to a :samp:`.mo` file (which is a binary representation
of the strings)::

   msgfmt -o i18n/id/LC_MESSAGES/riab.mo i18n/id/LC_MESSAGES/riab.po

The :samp:`msgfmt` command accepts one or more input files which can be 
merged into a single :samp:`.mo`.

.. note:: These functions are wrapped as make scripts so you should not need to 
   use them on a day to day basis.

